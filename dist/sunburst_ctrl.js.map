{"version":3,"sources":["../src/sunburst_ctrl.js"],"names":["moment","$","_","kbn","config","TimeSeries","MetricsPanelCtrl","SunburstCtrl","$scope","$element","$injector","panelDefaults","legend","show","values","width","height","fontSize","fontWeight","font","family","statData","message","text","title","name","subText","defaults","panel","events","on","onInitEditMode","bind","render","element","sunburst","Sunburst","panelId","id","addEditorTab","dataList","series","map","seriesHandler","seriesData","datapoints","alias","target","flotpairs","getFlotPairs","nullPointMode","scope","elem","$panelContainer","find","select","selector","init","bgColor","css","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACOA,Y;;AAGAC,O;;AACAC,O;;AAOAC,S;;AACAC,Y;;AACAC,gB;;AACCC,sB,kBAAAA,gB;;;;;;;;;;;;;;;;;;;;;8BAEKC,Y;;;AACX,8BAAYC,MAAZ,EAAmBC,QAAnB,EAA4BC,SAA5B,EAAsC;AAAA;;AAAA,kIAC9BF,MAD8B,EACvBE,SADuB;;AAEpC,cAAMC,gBAAgB;AACpBC,oBAAQ;AACNC,oBAAM,IADA,EACM;AACZC,sBAAQ;AAFF,aADY;AAKpBC,mBAAM,GALc;AAMpBC,oBAAO,GANa;AAOpBC,sBAAU,MAPU;AAQpBC,wBAAY,MARQ;AASpBC,kBAAM,EAAEC,QAAQ,8DAAV,EATc;AAUpBC,sBAAS,EAVW;AAWpBC,qBAAQ,EAXY;AAYpBC,kBAAK;AACHC,qBAAM,EADH;AAEHC,oBAAK,EAFF;AAGHC,uBAAQ;AAHL;AAZe,WAAtB;AAkBAxB,YAAEyB,QAAF,CAAW,MAAKC,KAAhB,EAAuBjB,aAAvB;AACAT,YAAEyB,QAAF,CAAW,MAAKC,KAAL,CAAWhB,MAAtB,EAA8BD,cAAcC,MAA5C;AACA,gBAAKiB,MAAL,CAAYC,EAAZ,CAAe,gBAAf,EAAgC,MAAKC,cAAL,CAAoBC,IAApB,OAAhC;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,mBAAf,EAAoC,MAAKG,MAAL,CAAYD,IAAZ,OAApC;AACA,gBAAKE,OAAL,GAAezB,QAAf;AACA,gBAAK0B,QAAL,GAAgB,IAAIC,QAAJ,EAAhB;AACA,gBAAKD,QAAL,CAAcE,OAAd,GAAwB,UAAU,MAAKT,KAAL,CAAWU,EAA7C;;AAGA;AACA;;AA9BoC;AAgCrC;;;;2CACgB;AACf,iBAAKC,YAAL,CAAkB,SAAlB,EAA4B,mDAA5B,EAAgF,CAAhF;AACD;;;yCAEcC,Q,EAAU;;AAEvB,iBAAKC,MAAL,GAAcD,SAASE,GAAT,CAAa,KAAKC,aAAL,CAAmBX,IAAnB,CAAwB,IAAxB,CAAb,CAAd;AACA,iBAAKC,MAAL;AACD;;;wCAEaW,U,EAAY;AACxB,gBAAIH,SAAS,IAAIpC,UAAJ,CAAe;AAC1BwC,0BAAYD,WAAWC,UADG;AAE1BC,qBAAOF,WAAWG;AAFQ,aAAf,CAAb;AAIAN,mBAAOO,SAAP,GAAmBP,OAAOQ,YAAP,CAAoB,KAAKrB,KAAL,CAAWsB,aAA/B,CAAnB;;AAEA,mBAAOT,MAAP;AACD;;;+BAEIU,K,EAAOC,I,EAAM;AAAA;;AAChB,iBAAKvB,MAAL,CAAYC,EAAZ,CAAe,QAAf,EAAyB,YAAM;AAC3B,kBAAMuB,kBAAkBD,KAAKE,IAAL,CAAU,kBAAV,CAAxB;;AAEA,kBAAIC,SAAS,OAAKrB,OAAL,CAAaoB,IAAb,CAAkB,MAAlB,CAAb;AACA,qBAAKnB,QAAL,CAAcqB,QAAd,GAAyBD,OAAO,CAAP,CAAzB;AACA,qBAAKpB,QAAL,CAAcsB,IAAd;;AAGF,kBAAI,OAAK7B,KAAL,CAAW8B,OAAf,EAAwB;AACtBL,gCAAgBM,GAAhB,CAAoB,kBAApB,EAAwC,OAAK/B,KAAL,CAAW8B,OAAnD;AACD,eAFD,MAEO;AACLL,gCAAgBM,GAAhB,CAAoB,kBAApB,EAAwC,EAAxC;AACD;AAEF,aAdD;AAgBD;;;;QAvE+BrD,gB;;;;AA0ElCC,mBAAaqD,WAAb,GAA2B,aAA3B","file":"sunburst_ctrl.js","sourcesContent":["\nimport moment from 'moment';\n\n\nimport $ from 'jquery';\nimport _ from 'lodash';\n\nimport './d3min.js';\n//import './d3layout.js';\nimport './graphics.js'\n\n\nimport kbn from 'app/core/utils/kbn';\nimport config from 'app/core/config';\nimport TimeSeries from 'app/core/time_series2';\nimport {MetricsPanelCtrl} from 'app/plugins/sdk';\n\nexport class SunburstCtrl extends MetricsPanelCtrl {\n  constructor($scope,$element,$injector){\n    super($scope,$injector);\n    const panelDefaults = {\n      legend: {\n        show: true, // disable/enable legend\n        values: true\n      },\n      width:100,\n      height:100,\n      fontSize: '25px',\n      fontWeight: '10px',\n      font: { family: 'Myriad Set Pro, Helvetica Neue, Helvetica, Arial, sans-serif' },\n      statData:{},\n      message:\"\",\n      text:{\n        title:'',\n        name:'',\n        subText:''\n      }\n    }\n    _.defaults(this.panel, panelDefaults);\n    _.defaults(this.panel.legend, panelDefaults.legend);\n    this.events.on('init-edit-mode',this.onInitEditMode.bind(this));\n    this.events.on('panel-initialized', this.render.bind(this));\n    this.element = $element;\n    this.sunburst = new Sunburst();\n    this.sunburst.panelId = 'panel' + this.panel.id;\n\n\n    //this.events.on('data-received', this.onDataReceived.bind(this));\n    //this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\n\n  }\n  onInitEditMode() {\n    this.addEditorTab('Options','public/plugins/grafana-sunburst-panel/editor.html',2);\n  }\n\n  onDataReceived(dataList) {\n\n    this.series = dataList.map(this.seriesHandler.bind(this));\n    this.render();\n  }\n\n  seriesHandler(seriesData) {\n    var series = new TimeSeries({\n      datapoints: seriesData.datapoints,\n      alias: seriesData.target,\n    });\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n\n    return series;\n  }\n\n  link(scope, elem) {\n    this.events.on('render', () => {\n        const $panelContainer = elem.find('.panel-container');\n\n        var select = this.element.find(\".sun\");\n        this.sunburst.selector = select[0];\n        this.sunburst.init();\n\n\n      if (this.panel.bgColor) {\n        $panelContainer.css('background-color', this.panel.bgColor);\n      } else {\n        $panelContainer.css('background-color', '');\n      }\n\n    });\n\n  }\n}\n\nSunburstCtrl.templateUrl = 'module.html';\n"]}